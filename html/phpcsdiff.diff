--- src/classes/Db/DbApi.php
+++ PHP_CodeSniffer
@@ -1,68 +1,71 @@
-<?php
-
-namespace CandidateTest\Db;
-
-use CandidateTest\Helpers\DbHelper;
-
-class DbApi {
-
-    /**
-        - process incoming parameters (manufacturer name)
-        - add manufacturer to the database or throw exception when a problem occurs
-        - possible problems:
-            - manufacturer with this name already exists
-            - new manufacturer name is empty string
-        - take care of SQL injection attacks 
-     */
-    protected static function handleAddManufacturer(): void {
-        
-    }
-
-    public static function handleDbApiRequest(): void {
-        $action = filter_input(INPUT_POST, 'action');
-        $ret = null;
-
-        try {
-            if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
-                throw new \Exception("Invalid method [{$_SERVER['REQUEST_METHOD']}], only POST is allowed");
-            }
-
-            // call appropriate worker by the action sent
-            if ($action === 'addManufacturer') {
-                static::handleAddManufacturer();
-            } else {
-                throw new \Exception("Invalid action [{$action}]");
-            }
-
-        } catch (\Exception $ex) {
-            self::returnErrorJson($ex);
-        }
-
-        self::returnJson();
-    }
-
-    private static function returnErrorJson(\Exception $ex): void {
-        header('Content-Type: application/json; charset=utf-8');
-        echo json_encode([
-            'ok' => false,
-            'error' => $ex->getMessage(),
-            'trace' => $ex->getTraceAsString(),
-        ]);
-        exit();
-    }
-
-    private static function returnJson(mixed $data = null): void {
-        header('Content-Type: application/json; charset=utf-8');
-
-        $ret = [
-            'ok' => true,
-        ];
-
-        if (!is_null($data)) {
-            $ret['data'] = $data;
-        }
-
-        echo json_encode($ret);
-        exit();
-    }
-}
+<?php
+
+namespace CandidateTest\Db;
+
+use CandidateTest\Helpers\DbHelper;
+
+class DbApi
+{
+
+    /**
+        - process incoming parameters (manufacturer name)
+        - add manufacturer to the database or throw exception when a problem occurs
+        - possible problems:
+            - manufacturer with this name already exists
+            - new manufacturer name is empty string
+        - take care of SQL injection attacks
+     */
+    protected static function handleAddManufacturer(): void
+    {
+    }
+
+    public static function handleDbApiRequest(): void
+    {
+        $action = filter_input(INPUT_POST, 'action');
+        $ret = null;
+
+        try {
+            if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
+                throw new \Exception("Invalid method [{$_SERVER['REQUEST_METHOD']}], only POST is allowed");
+            }
+
+            // call appropriate worker by the action sent
+            if ($action === 'addManufacturer') {
+                static::handleAddManufacturer();
+            } else {
+                throw new \Exception("Invalid action [{$action}]");
+            }
+        } catch (\Exception $ex) {
+            self::returnErrorJson($ex);
+        }
+
+        self::returnJson();
+    }
+
+    private static function returnErrorJson(\Exception $ex): void
+    {
+        header('Content-Type: application/json; charset=utf-8');
+        echo json_encode([
+            'ok' => false,
+            'error' => $ex->getMessage(),
+            'trace' => $ex->getTraceAsString(),
+        ]);
+        exit();
+    }
+
+    private static function returnJson(mixed $data = null): void
+    {
+        header('Content-Type: application/json; charset=utf-8');
+
+        $ret = [
+            'ok' => true,
+        ];
+
+        if (!is_null($data)) {
+            $ret['data'] = $data;
+        }
+
+        echo json_encode($ret);
+        exit();
+    }
+}
--- src/classes/Db/DbBasics.php
+++ PHP_CodeSniffer
@@ -1,32 +1,35 @@
-<?php
-
-namespace CandidateTest\Db;
-
-use CandidateTest\Helpers\DbHelper;
-
-class DbBasics {
-
-    /**
-     * Render (echo) a "select" HTML component filled with manufacturers from the database
-     */
-    public static function renderManufacturersSelectComponent(): void {
-        $connection = DbHelper::getPdoConnection();
-        // $connection = DbHelper::getMysqliConnection();
-
-        echo 'Placeholder of the manufacturers selector';
-    }
-
-    /**
-     * Render (echo) a "table" (or else suitable) HTML component filled with all products from the database
-     * 
-     * Columns:
-     * product.product.id, category.name, manufacturer.name, product.name, product.price
-     * 
-     */
-    public static function renderProductList(): void {
-        $connection = DbHelper::getPdoConnection();
-        // $connection = DbHelper::getMysqliConnection();
-
-        echo 'Placeholder of the products list';
-    }
-}
+<?php
+
+namespace CandidateTest\Db;
+
+use CandidateTest\Helpers\DbHelper;
+
+class DbBasics
+{
+
+    /**
+     * Render (echo) a "select" HTML component filled with manufacturers from the database
+     */
+    public static function renderManufacturersSelectComponent(): void
+    {
+        $connection = DbHelper::getPdoConnection();
+        // $connection = DbHelper::getMysqliConnection();
+
+        echo 'Placeholder of the manufacturers selector';
+    }
+
+    /**
+     * Render (echo) a "table" (or else suitable) HTML component filled with all products from the database
+     *
+     * Columns:
+     * product.product.id, category.name, manufacturer.name, product.name, product.price
+     *
+     */
+    public static function renderProductList(): void
+    {
+        $connection = DbHelper::getPdoConnection();
+        // $connection = DbHelper::getMysqliConnection();
+
+        echo 'Placeholder of the products list';
+    }
+}
--- src/classes/Group01/ArrayBasics.php
+++ PHP_CodeSniffer
@@ -1,79 +1,85 @@
-<?php
-
-namespace CandidateTest\Group01;
-
-use \CandidateTest\Group01\Types\Employee;
-
-class ArrayBasics {
-
-    /**
-     * Divide the array into many sub-arrays,
-     * where each subarray is at most of group size.
-     *
-     * @example ArrayBasics::getGroupedArray([1, 2, 3, 4, 5], 2) -> [[ 1, 2], [3, 4], [5]]
-     * @example ArrayBasics::getGroupedArray([1, 2, 3, 4, 5], 3) -> [[ 1, 2, 3], [4, 5]]
-     * @example ArrayBasics::getGroupedArray([1, 2, 3, 4, 5], 6) -> [[ 1, 2, 3, 4, 5]]
-     */
-    public static function getGroupedArray(array $inputArray, int $groupSize) {
-        return [['1', '2'], ['3', '4'], ['5', '6']];
-    }
-
-    /**
-     * Return employee with the highest salary (return first when equal)
-     *
-     * @param Employee[] $employees
-     * 
-     * @return Employee|null
-     * 
-     */
-    public static function getMaxSalaryEmployee(array $employees): ?Employee {
-        return $employees[0] ?? null;
-    }
-
-    /**
-     * Return the greatest salary per group
-     * 
-     * return array example:
-     * [
-     *      'group1' => 100,
-     *      'group2' => 200,
-     *      'group3' => 300,
-     * ];
-     *
-     * @param Employee[] $employees
-     * 
-     * @return array<string, int>
-     * 
-     */
-    public static function getMaxSalaryPerGroup(array $employees): array {
-        return [
-            'group1' => 100,
-            'group2' => 200,
-            'group3' => 300,
-        ];
-    }
-
-    /**
-     * Return the greates salary per group
-     *
-     * @param Employee[] $employees
-     * 
-     * @return Employee[]
-     * 
-     */
-    public static function getEmployeesOrderedBySalary(array $employees): array {
-        return $employees;
-    }
-
-    /**
-     * Return the greates salary per group
-     *
-     * @param Employee[] $employees
-     * 
-     * @return Employee[]
-     * 
-     */
-    public static function getEmployeesOrderedByGroupAndBirthDate(array $employees): array {
-        return $employees;
-    }
-}
+<?php
+
+namespace CandidateTest\Group01;
+
+use \CandidateTest\Group01\Types\Employee;
+
+class ArrayBasics
+{
+
+    /**
+     * Divide the array into many sub-arrays,
+     * where each subarray is at most of group size.
+     *
+     * @example ArrayBasics::getGroupedArray([1, 2, 3, 4, 5], 2) -> [[ 1, 2], [3, 4], [5]]
+     * @example ArrayBasics::getGroupedArray([1, 2, 3, 4, 5], 3) -> [[ 1, 2, 3], [4, 5]]
+     * @example ArrayBasics::getGroupedArray([1, 2, 3, 4, 5], 6) -> [[ 1, 2, 3, 4, 5]]
+     */
+    public static function getGroupedArray(array $inputArray, int $groupSize)
+    {
+        return [['1', '2'], ['3', '4'], ['5', '6']];
+    }
+
+    /**
+     * Return employee with the highest salary (return first when equal)
+     *
+     * @param Employee[] $employees
+     *
+     * @return Employee|null
+     *
+     */
+    public static function getMaxSalaryEmployee(array $employees): ?Employee
+    {
+        return $employees[0] ?? null;
+    }
+
+    /**
+     * Return the greatest salary per group
+     *
+     * return array example:
+     * [
+     *      'group1' => 100,
+     *      'group2' => 200,
+     *      'group3' => 300,
+     * ];
+     *
+     * @param Employee[] $employees
+     *
+     * @return array<string, int>
+     *
+     */
+    public static function getMaxSalaryPerGroup(array $employees): array
+    {
+        return [
+            'group1' => 100,
+            'group2' => 200,
+            'group3' => 300,
+        ];
+    }
+
+    /**
+     * Return the greates salary per group
+     *
+     * @param Employee[] $employees
+     *
+     * @return Employee[]
+     *
+     */
+    public static function getEmployeesOrderedBySalary(array $employees): array
+    {
+        return $employees;
+    }
+
+    /**
+     * Return the greates salary per group
+     *
+     * @param Employee[] $employees
+     *
+     * @return Employee[]
+     *
+     */
+    public static function getEmployeesOrderedByGroupAndBirthDate(array $employees): array
+    {
+        return $employees;
+    }
+}
--- src/classes/Group01/StringBasics.php
+++ PHP_CodeSniffer
@@ -1,51 +1,56 @@
-<?php
-
-namespace CandidateTest\Group01;
-
-class StringBasics {
-
-    /**
-     * Returns that the input string contains at least one of these characters:
-     * - uppercase character
-     * - lowercase character
-     * - number
-     * @param string $inputString Input character
-     * @return bool
-     */
-    public static function CheckIfContainsLowercaseUppercaseNumber(string $inputString): bool {
-        return false;
-    }
-
-    /**
-     * Convert url to https scheme
-     * @param string $inputString Input string can be a url in format abc.de, //abc.de, http://abc.de, https://abc.de
-     * @return string url in https scheme: https://abc.de
-     */
-    public static function ConvertUrlToHttps(string $inputString): string {
-        $ret = $inputString;
-
-        return "https://{$ret}";
-    }
-
-    /**
-     * Return all issue numbers found in a text. Issue numbers must not be separated from the other text parts (with space or others)
-     * Issue numbers contain 4 uppercase characters, a minus sign and 6 numbers. When more numbers are there, return the first 6 numbers
-     * Examples: ABCD-123456, QWER-987654
-     * @param string $inputString
-     * @return array<string> Array of issue numbers found in input string
-     */
-    public static function GetIssueNumbers(string $inputString): array {
-        return ['ABCD-123456', 'LKJH-765432'];
-    }
-
-    /**
-     * Capitalize each word.
-     *
-     * @method static string CapitaliyeEachWord(string $inputString)
-     * @example StringBasics::CapitaliyeEachWord('hello there') === 'Hello There'
-     * @example StringBasics::CapitaliyeEachWord("hey, so it's working!") === "Hey, So It's Working!"
-     */
-    public static function CapitalizeEachWord(string $inputString = ''): string {
-        return $inputString;
-    }
-}
+<?php
+
+namespace CandidateTest\Group01;
+
+class StringBasics
+{
+
+    /**
+     * Returns that the input string contains at least one of these characters:
+     * - uppercase character
+     * - lowercase character
+     * - number
+     * @param string $inputString Input character
+     * @return bool
+     */
+    public static function CheckIfContainsLowercaseUppercaseNumber(string $inputString): bool
+    {
+        return false;
+    }
+
+    /**
+     * Convert url to https scheme
+     * @param string $inputString Input string can be a url in format abc.de, //abc.de, http://abc.de, https://abc.de
+     * @return string url in https scheme: https://abc.de
+     */
+    public static function ConvertUrlToHttps(string $inputString): string
+    {
+        $ret = $inputString;
+
+        return "https://{$ret}";
+    }
+
+    /**
+     * Return all issue numbers found in a text. Issue numbers must not be separated from the other text parts (with space or others)
+     * Issue numbers contain 4 uppercase characters, a minus sign and 6 numbers. When more numbers are there, return the first 6 numbers
+     * Examples: ABCD-123456, QWER-987654
+     * @param string $inputString
+     * @return array<string> Array of issue numbers found in input string
+     */
+    public static function GetIssueNumbers(string $inputString): array
+    {
+        return ['ABCD-123456', 'LKJH-765432'];
+    }
+
+    /**
+     * Capitalize each word.
+     *
+     * @method static string CapitaliyeEachWord(string $inputString)
+     * @example StringBasics::CapitaliyeEachWord('hello there') === 'Hello There'
+     * @example StringBasics::CapitaliyeEachWord("hey, so it's working!") === "Hey, So It's Working!"
+     */
+    public static function CapitalizeEachWord(string $inputString = ''): string
+    {
+        return $inputString;
+    }
+}
--- src/classes/Group01/Types/Employee.php
+++ PHP_CodeSniffer
@@ -1,61 +1,64 @@
-<?php
-
-namespace CandidateTest\Group01\Types;
-
-class Employee {
-    public string $name;
-    public \DateTime $birthday;
-    public \DateTime $hiredOn;
-    public string $group;
-    public int $salary;
-
-    /**
-     * Create sample array of employee data
-     *
-     * @param array{'name': string, 'birthday': string, 'hiredOn': string, 'group': string, 'salary': int} $data
-     * 
-     * @return Employee
-     * 
-     */
-    public static function createFromData(array $data): Employee {
-        $ret = new Employee();
-
-        $ret->name = $data['name'];
-        $ret->birthday = \DateTime::createFromFormat('Y-m-d', $data['birthday']);
-        $ret->hiredOn = \DateTime::createFromFormat('Y-m-d', $data['hiredOn']);
-        $ret->group = $data['group'];
-        $ret->salary = (int)$data['salary'];
-
-        return $ret;
-    }
-
-    /**
-     * @return Employee[]
-     */
-    public static function getSampleEmployees(): array {
-        $sampleData = [
-            ['name' => 'Sam Smith', 'birthday' => '1968-12-18', 'hiredOn' => '2021-05-06', 'group' => 'Accounting', 'salary' => 45000],
-            ['name' => 'Amy Adams', 'birthday' => '1974-08-22', 'hiredOn' => '2015-04-01', 'group' => 'CEO', 'salary' => 250000],
-            ['name' => 'Joe Compostor', 'birthday' => '1991-08-25', 'hiredOn' => '2008-11-11', 'group' => 'Accounting', 'salary' => 70000],
-            ['name' => 'Mary White', 'birthday' => '1955-11-30', 'hiredOn' => '2022-02-01', 'group' => 'Cleaning', 'salary' => 25000],
-            ['name' => 'Keith Black', 'birthday' => '1987-07-18', 'hiredOn' => '2012-10-01', 'group' => 'IT', 'salary' => 65000],
-            ['name' => 'Sue Pollack', 'birthday' => '1994-02-02', 'hiredOn' => '2020-01-21', 'group' => 'IT', 'salary' => 55000],
-            ['name' => 'Anna Lena', 'birthday' => '1977-03-15', 'hiredOn' => '2007-06-14', 'group' => 'Cleaning', 'salary' => 32000],
-            ['name' => 'Victor Gray', 'birthday' => '1997-10-17', 'hiredOn' => '2010-05-08', 'group' => 'Sales', 'salary' => 52000],
-            ['name' => 'Alex White', 'birthday' => '1983-01-09', 'hiredOn' => '2018-12-01', 'group' => 'Sales', 'salary' => 37000],
-        ];
-
-        return array_map(
-            fn($data) => Employee::createFromData($data),
-            $sampleData,
-        );
-    }
-
-    public function __toString()
-    {
-        $birthday = $this->birthday->format('Y-m-d');
-        $hiredOn = $this->birthday->format('Y-m-d');
-
-        return "{$this->name} [{$birthday}, hired on {$hiredOn}] group: {$this->group}, salary: {$this->salary}";
-    }
-}
+<?php
+
+namespace CandidateTest\Group01\Types;
+
+class Employee
+{
+    public string $name;
+    public \DateTime $birthday;
+    public \DateTime $hiredOn;
+    public string $group;
+    public int $salary;
+
+    /**
+     * Create sample array of employee data
+     *
+     * @param array{'name': string, 'birthday': string, 'hiredOn': string, 'group': string, 'salary': int} $data
+     *
+     * @return Employee
+     *
+     */
+    public static function createFromData(array $data): Employee
+    {
+        $ret = new Employee();
+
+        $ret->name = $data['name'];
+        $ret->birthday = \DateTime::createFromFormat('Y-m-d', $data['birthday']);
+        $ret->hiredOn = \DateTime::createFromFormat('Y-m-d', $data['hiredOn']);
+        $ret->group = $data['group'];
+        $ret->salary = (int)$data['salary'];
+
+        return $ret;
+    }
+
+    /**
+     * @return Employee[]
+     */
+    public static function getSampleEmployees(): array
+    {
+        $sampleData = [
+            ['name' => 'Sam Smith', 'birthday' => '1968-12-18', 'hiredOn' => '2021-05-06', 'group' => 'Accounting', 'salary' => 45000],
+            ['name' => 'Amy Adams', 'birthday' => '1974-08-22', 'hiredOn' => '2015-04-01', 'group' => 'CEO', 'salary' => 250000],
+            ['name' => 'Joe Compostor', 'birthday' => '1991-08-25', 'hiredOn' => '2008-11-11', 'group' => 'Accounting', 'salary' => 70000],
+            ['name' => 'Mary White', 'birthday' => '1955-11-30', 'hiredOn' => '2022-02-01', 'group' => 'Cleaning', 'salary' => 25000],
+            ['name' => 'Keith Black', 'birthday' => '1987-07-18', 'hiredOn' => '2012-10-01', 'group' => 'IT', 'salary' => 65000],
+            ['name' => 'Sue Pollack', 'birthday' => '1994-02-02', 'hiredOn' => '2020-01-21', 'group' => 'IT', 'salary' => 55000],
+            ['name' => 'Anna Lena', 'birthday' => '1977-03-15', 'hiredOn' => '2007-06-14', 'group' => 'Cleaning', 'salary' => 32000],
+            ['name' => 'Victor Gray', 'birthday' => '1997-10-17', 'hiredOn' => '2010-05-08', 'group' => 'Sales', 'salary' => 52000],
+            ['name' => 'Alex White', 'birthday' => '1983-01-09', 'hiredOn' => '2018-12-01', 'group' => 'Sales', 'salary' => 37000],
+        ];
+
+        return array_map(
+            fn($data) => Employee::createFromData($data),
+            $sampleData,
+        );
+    }
+
+    public function __toString()
+    {
+        $birthday = $this->birthday->format('Y-m-d');
+        $hiredOn = $this->birthday->format('Y-m-d');
+
+        return "{$this->name} [{$birthday}, hired on {$hiredOn}] group: {$this->group}, salary: {$this->salary}";
+    }
+}
--- src/classes/Helpers/DbHelper.php
+++ PHP_CodeSniffer
@@ -1,43 +1,49 @@
-<?php
-
-namespace CandidateTest\Helpers;
-
-use mysqli;
-
-class DbHelper {
-    protected static ?\PDO $pdoObject = null;
-    protected static ?mysqli $mysqliConnection = null;
-
-    public static function getPdoConnection(): \PDO {
-        if (is_null(static::$pdoObject)) {
-            static::$pdoObject = new \PDO(
-                static::getPdoDsn(),
-                $_ENV['MYSQL_USER'],
-                $_ENV['MYSQL_PASSWORD'],
-                [
-                    \PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION
-                ]);
-        }
-
-        return static::$pdoObject;
-    }
-    
-    protected static function getPdoDsn(): string {
-        return "mysql:host={$_ENV['MYSQL_SERVER']};port={$_ENV['MYSQL_PORT']};dbname={$_ENV['MYSQL_DATABASE']}";
-    }
-
-    public static function getMysqliConnection(): \mysqli {
-        if (static::$mysqliConnection == null) {
-            static::$mysqliConnection = new mysqli(
-                $_ENV['MYSQL_SERVER'],
-                $_ENV['MYSQL_USER'],
-                $_ENV['MYSQL_PASSWORD'],
-                $_ENV['MYSQL_DATABASE']);
-
-            /* Set the desired charset after establishing a connection */
-            static::$mysqliConnection->set_charset('utf8mb4');
-        }
-
-        return static::$mysqliConnection;
-    }
-}
+<?php
+
+namespace CandidateTest\Helpers;
+
+use mysqli;
+
+class DbHelper
+{
+    protected static ?\PDO $pdoObject = null;
+    protected static ?mysqli $mysqliConnection = null;
+
+    public static function getPdoConnection(): \PDO
+    {
+        if (is_null(static::$pdoObject)) {
+            static::$pdoObject = new \PDO(
+                static::getPdoDsn(),
+                $_ENV['MYSQL_USER'],
+                $_ENV['MYSQL_PASSWORD'],
+                [
+                    \PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION
+                ]
+            );
+        }
+
+        return static::$pdoObject;
+    }
+    
+    protected static function getPdoDsn(): string
+    {
+        return "mysql:host={$_ENV['MYSQL_SERVER']};port={$_ENV['MYSQL_PORT']};dbname={$_ENV['MYSQL_DATABASE']}";
+    }
+
+    public static function getMysqliConnection(): \mysqli
+    {
+        if (static::$mysqliConnection == null) {
+            static::$mysqliConnection = new mysqli(
+                $_ENV['MYSQL_SERVER'],
+                $_ENV['MYSQL_USER'],
+                $_ENV['MYSQL_PASSWORD'],
+                $_ENV['MYSQL_DATABASE']
+            );
+
+            /* Set the desired charset after establishing a connection */
+            static::$mysqliConnection->set_charset('utf8mb4');
+        }
+
+        return static::$mysqliConnection;
+    }
+}
--- src/classes/Helpers/HtmlHelper.php
+++ PHP_CodeSniffer
@@ -1,24 +1,27 @@
-<?php
-
-namespace CandidateTest\Helpers;
-
-class HtmlHelper {
-    public static function GetHtmlHeader(string $title = 'PHP candidates test'): string {
-        return '<html>
-        <head>
-          <title>' . htmlspecialchars($title) . '</title>
-        </head>
-        <body>
-            <h3>' . htmlspecialchars($title) . '</h3>
-            <a href="/">Back</a>
-            <br />
-            <br />
-        ';
-    }
-    
-    public static function GetHtmlFooter(): string {
-        return '
-        </body>
-        </html>';
-    }
-}
\ No newline at end of file
+<?php
+
+namespace CandidateTest\Helpers;
+
+class HtmlHelper
+{
+    public static function GetHtmlHeader(string $title = 'PHP candidates test'): string
+    {
+        return '<html>
+        <head>
+          <title>' . htmlspecialchars($title) . '</title>
+        </head>
+        <body>
+            <h3>' . htmlspecialchars($title) . '</h3>
+            <a href="/">Back</a>
+            <br />
+            <br />
+        ';
+    }
+    
+    public static function GetHtmlFooter(): string
+    {
+        return '
+        </body>
+        </html>';
+    }
+}
--- src/frontend/arrayBasicsPage.php
+++ PHP_CodeSniffer
@@ -1,189 +1,195 @@
-<?php
-
-use CandidateTest\Group01\ArrayBasics;
-
-require_once $_SERVER['DOCUMENT_ROOT'] . '/../vendor/autoload.php';
-
-echo \CandidateTest\Helpers\HtmlHelper::GetHtmlHeader('Array basics');
-
-// group array
-
-writeResult(
-    'Group array into sub-arrays',
-    getGroupArrayResult(),
-    getGroupArrayHelp()
-);
-
-
-// Employee-based tests
-
-$employees = \CandidateTest\Group01\Types\Employee::getSampleEmployees();
-
-echo '<h3>Employees</h3><ul>';
-array_walk(
-    $employees,
-    function($employee) {
-        echo "<li>{$employee}</li>";
-    }
-);
-echo '</ul>';
-
-echo '<h3>Results:</h3><ul>';
-
-writeResult(
-    'Get employee with greatest salary',
-    \CandidateTest\Group01\ArrayBasics::getMaxSalaryEmployee($employees),
-    getGreatestSalaryHelp()
-);
-
-
-$result = \CandidateTest\Group01\ArrayBasics::getMaxSalaryPerGroup($employees);
-$resultString = '<ul>';
-foreach($result as $key => $value) {
-    $resultString .= "<li>$key - $value</li>";
-}
-$resultString .= '</ul>';
-
-writeResult(
-    'Get greatest salary per group',
-    $resultString,
-    getMaxSalaryPerGroupHelp()
-);
-
-
-$result3 = \CandidateTest\Group01\ArrayBasics::getEmployeesOrderedBySalary($employees);
-$resultString3 = '<ul>';
-foreach($result3 as $key => $value) {
-    $resultString3 .= "<li>$key - $value</li>";
-}
-$resultString3 .= '</ul>';
-
-writeResult(
-    'Order employees by salary',
-    $resultString3,
-    getEmployeesOrderedBySalaryHelp()
-);
-
-
-$result2 = \CandidateTest\Group01\ArrayBasics::getEmployeesOrderedByGroupAndBirthDate($employees);
-$resultString2 = '<ul>';
-foreach($result2 as $key => $value) {
-    $resultString2 .= "<li>$key - $value</li>";
-}
-$resultString2 .= '</ul>';
-
-writeResult(
-    'Order employees by group and birth date',
-    $resultString2,
-    getEmployeesOrderedByGroupAndBirthDateHelp()
-);
-
-
-echo \CandidateTest\Helpers\HtmlHelper::GetHtmlFooter();
-
-// end of execution
-
-/* get group array */
-
-function getGroupArrayResult() {
-    $inputString = $_GET['groupArrayString'] ?? '1, 2, 3, 4, 5, 6'; 
-    $groupSize = (int)($_GET['groupArrayNumber'] ?? 2);
-
-    $inputArray = array_map(
-        fn($s) => trim($s),
-        explode(',', $inputString)
-    );
-
-    $result = ArrayBasics::getGroupedArray($inputArray, $groupSize);
-
-    $ret = '<p>
-        <form>
-            <input type="textbox" name="groupArrayString" style="width: 50vw;" value="' . htmlentities($inputString) . '" />
-            <br />
-            <input type="number" name="groupArrayNumber" value="' . (int)$groupSize . '" />
-            <br />
-            <input type="submit" value="Küldés" />
-        </form>
-    </p>
-    <p> Result (group size is ' . $groupSize . '):</p>
-    <p><pre>' . htmlentities(print_r($result, true)) . '</pre></p>
-    ';
-
-    return $ret;
-}
-
-function getGroupArrayHelp(): string {
-    return '
-    <ul>
-        <li>Code location: src/classes/Group01/ArrayBasics.php</li>
-        <li>Method: ArrayBasics::getGroupedArray</li>
-        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetGroupedArray</code></li>
-    </ul>
-    ';
-}
-
-/* get employee with the greatest salary */
-
-function getGreatestSalaryHelp(): string {
-    return '
-    <ul>
-        <li>Code location: src/classes/Group01/ArrayBasics.php</li>
-        <li>Method: ArrayBasics::getMaxSalaryEmployee</li>
-        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetMaxSalaryEmployee</code></li>
-    </ul>
-    ';
-}
-
-/* get the greatest salary per group */
-
-function getMaxSalaryPerGroupHelp(): string {
-    return '
-    <ul>
-        <li>Code location: src/classes/Group01/ArrayBasics.php</li>
-        <li>Method: ArrayBasics::getMaxSalaryPerGroup</li>
-        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetMaxSalaryPerGroup</code></li>
-    </ul>
-    ';
-}
-
-/* order employees by salary */
-
-function getEmployeesOrderedBySalaryHelp(): string {
-    return '
-    <ul>
-        <li>Code location: src/classes/Group01/ArrayBasics.php</li>
-        <li>Method: ArrayBasics::getEmployeesOrderedBySalary</li>
-        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetEmployeesOrderedBySalary</code></li>
-    </ul>
-    ';
-}
-
-/* order employees by group and birthdate */
-
-function getEmployeesOrderedByGroupAndBirthDateHelp(): string {
-    return '
-    <ul>
-        <li>Code location: src/classes/Group01/ArrayBasics.php</li>
-        <li>Method: ArrayBasics::getEmployeesOrderedByGroupAndBirthDate</li>
-        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetEmployeesOrderedByGroupAndBirthDate</code></li>
-    </ul>
-    ';
-}
-
-/* Helpers */
-
-function writeResult(
-    string $title,
-    ?string $resultHtml,
-    string $helpHtml = ''
-): void {
-    echo '
-    <fieldset>
-        <legend>' . htmlentities($title) . '</legend>
-        <h4>Result:</h4>
-        ' . $resultHtml . '
-        <h4>Code location:</h4>
-        ' . $helpHtml . '
-    </fieldset>
-    ';
-}
\ No newline at end of file
+<?php
+
+use CandidateTest\Group01\ArrayBasics;
+
+require_once $_SERVER['DOCUMENT_ROOT'] . '/../vendor/autoload.php';
+
+echo \CandidateTest\Helpers\HtmlHelper::GetHtmlHeader('Array basics');
+
+// group array
+
+writeResult(
+    'Group array into sub-arrays',
+    getGroupArrayResult(),
+    getGroupArrayHelp()
+);
+
+
+// Employee-based tests
+
+$employees = \CandidateTest\Group01\Types\Employee::getSampleEmployees();
+
+echo '<h3>Employees</h3><ul>';
+array_walk(
+    $employees,
+    function ($employee) {
+        echo "<li>{$employee}</li>";
+    }
+);
+echo '</ul>';
+
+echo '<h3>Results:</h3><ul>';
+
+writeResult(
+    'Get employee with greatest salary',
+    \CandidateTest\Group01\ArrayBasics::getMaxSalaryEmployee($employees),
+    getGreatestSalaryHelp()
+);
+
+
+$result = \CandidateTest\Group01\ArrayBasics::getMaxSalaryPerGroup($employees);
+$resultString = '<ul>';
+foreach ($result as $key => $value) {
+    $resultString .= "<li>$key - $value</li>";
+}
+$resultString .= '</ul>';
+
+writeResult(
+    'Get greatest salary per group',
+    $resultString,
+    getMaxSalaryPerGroupHelp()
+);
+
+
+$result3 = \CandidateTest\Group01\ArrayBasics::getEmployeesOrderedBySalary($employees);
+$resultString3 = '<ul>';
+foreach ($result3 as $key => $value) {
+    $resultString3 .= "<li>$key - $value</li>";
+}
+$resultString3 .= '</ul>';
+
+writeResult(
+    'Order employees by salary',
+    $resultString3,
+    getEmployeesOrderedBySalaryHelp()
+);
+
+
+$result2 = \CandidateTest\Group01\ArrayBasics::getEmployeesOrderedByGroupAndBirthDate($employees);
+$resultString2 = '<ul>';
+foreach ($result2 as $key => $value) {
+    $resultString2 .= "<li>$key - $value</li>";
+}
+$resultString2 .= '</ul>';
+
+writeResult(
+    'Order employees by group and birth date',
+    $resultString2,
+    getEmployeesOrderedByGroupAndBirthDateHelp()
+);
+
+
+echo \CandidateTest\Helpers\HtmlHelper::GetHtmlFooter();
+
+// end of execution
+
+/* get group array */
+
+function getGroupArrayResult()
+{
+    $inputString = $_GET['groupArrayString'] ?? '1, 2, 3, 4, 5, 6';
+    $groupSize = (int)($_GET['groupArrayNumber'] ?? 2);
+
+    $inputArray = array_map(
+        fn($s) => trim($s),
+        explode(',', $inputString)
+    );
+
+    $result = ArrayBasics::getGroupedArray($inputArray, $groupSize);
+
+    $ret = '<p>
+        <form>
+            <input type="textbox" name="groupArrayString" style="width: 50vw;" value="' . htmlentities($inputString) . '" />
+            <br />
+            <input type="number" name="groupArrayNumber" value="' . (int)$groupSize . '" />
+            <br />
+            <input type="submit" value="Küldés" />
+        </form>
+    </p>
+    <p> Result (group size is ' . $groupSize . '):</p>
+    <p><pre>' . htmlentities(print_r($result, true)) . '</pre></p>
+    ';
+
+    return $ret;
+}
+
+function getGroupArrayHelp(): string
+{
+    return '
+    <ul>
+        <li>Code location: src/classes/Group01/ArrayBasics.php</li>
+        <li>Method: ArrayBasics::getGroupedArray</li>
+        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetGroupedArray</code></li>
+    </ul>
+    ';
+}
+
+/* get employee with the greatest salary */
+
+function getGreatestSalaryHelp(): string
+{
+    return '
+    <ul>
+        <li>Code location: src/classes/Group01/ArrayBasics.php</li>
+        <li>Method: ArrayBasics::getMaxSalaryEmployee</li>
+        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetMaxSalaryEmployee</code></li>
+    </ul>
+    ';
+}
+
+/* get the greatest salary per group */
+
+function getMaxSalaryPerGroupHelp(): string
+{
+    return '
+    <ul>
+        <li>Code location: src/classes/Group01/ArrayBasics.php</li>
+        <li>Method: ArrayBasics::getMaxSalaryPerGroup</li>
+        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetMaxSalaryPerGroup</code></li>
+    </ul>
+    ';
+}
+
+/* order employees by salary */
+
+function getEmployeesOrderedBySalaryHelp(): string
+{
+    return '
+    <ul>
+        <li>Code location: src/classes/Group01/ArrayBasics.php</li>
+        <li>Method: ArrayBasics::getEmployeesOrderedBySalary</li>
+        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetEmployeesOrderedBySalary</code></li>
+    </ul>
+    ';
+}
+
+/* order employees by group and birthdate */
+
+function getEmployeesOrderedByGroupAndBirthDateHelp(): string
+{
+    return '
+    <ul>
+        <li>Code location: src/classes/Group01/ArrayBasics.php</li>
+        <li>Method: ArrayBasics::getEmployeesOrderedByGroupAndBirthDate</li>
+        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetEmployeesOrderedByGroupAndBirthDate</code></li>
+    </ul>
+    ';
+}
+
+/* Helpers */
+
+function writeResult(
+    string $title,
+    ?string $resultHtml,
+    string $helpHtml = ''
+): void {
+    echo '
+    <fieldset>
+        <legend>' . htmlentities($title) . '</legend>
+        <h4>Result:</h4>
+        ' . $resultHtml . '
+        <h4>Code location:</h4>
+        ' . $helpHtml . '
+    </fieldset>
+    ';
+}
--- src/frontend/dbApi.php
+++ PHP_CodeSniffer
@@ -1,7 +1,7 @@
-<?php
-
-use CandidateTest\Db\DbApi;
-
-require_once $_SERVER['DOCUMENT_ROOT'] . '/../vendor/autoload.php';
-
-DbApi::handleDbApiRequest();
+<?php
+
+use CandidateTest\Db\DbApi;
+
+require_once $_SERVER['DOCUMENT_ROOT'] . '/../vendor/autoload.php';
+
+DbApi::handleDbApiRequest();
--- src/frontend/dbPage.php
+++ PHP_CodeSniffer
@@ -1,119 +1,119 @@
-<?php
-
-use CandidateTest\Helpers\HtmlHelper;
-
-require_once $_SERVER['DOCUMENT_ROOT'] . '/../vendor/autoload.php';
-
-echo HtmlHelper::GetHtmlHeader('Basic database operations');
-
-?>
-
-<fieldset>
-    <legend>Database info</legend>
-
-    <h4>Database connection</h4>
-    <ul>
-        <li>Host: localhost:<?= $_ENV['MYSQL_PORT'] ?></li>
-        <li>User: <?= $_ENV['MYSQL_USER'] ?></li>
-        <li>Password: <?= $_ENV['MYSQL_PASSWORD'] ?></li>
-        <li>Database: <?= $_ENV['MYSQL_DATABASE'] ?></li>
-    </ul>
-</fieldset>
-<br />
-<br />
-<fieldset>
-    <legend>"select" html element from manufacturers table</legend>
-    <p>Render (echo) a "select" HTML component filled with all manufacturers ordered by name from the database<br />
-     value: manufacturer.id,<br />
-     label: manufacturer.name</p>
-
-    <div>
-        <span><b>Manufacturers:</b></span>
-        <?php \CandidateTest\Db\DbBasics::renderManufacturersSelectComponent() ?>
-    </div>
-
-    <ul>
-        <li>Code location: src/classes/Db/DbBasics.php</li>
-        <li>Method: DbBasics::renderManufacturersSelectComponent</li>
-    </ul>
-</fieldset>
-<br />
-<br />
-<fieldset>
-    <legend>"table" html element filled from the database</legend>
-
-    <p>Render (echo) a "table" HTML component filled with all products from the database<br />
-     Columns: product.id, category.name, manufacturer.name, product.name, product.price</p>
-
-    <h4>Products:</h4>
-    <div>
-        <?php \CandidateTest\Db\DbBasics::renderProductList() ?>
-    </div>
-
-    <ul>
-        <li>Code location: src/classes/Db/DbBasics.php</li>
-        <li>Method: DbBasics::renderProductList</li>
-    </ul>
-</fieldset>
-
-
-<br />
-<br />
-<fieldset>
-    <legend>Add manufacturer</legend>
-
-    <p>Add a manufacturer to the database<br />
-    When a name exists in the database or the name is empty, return an error.
-    </p>
-
-    <div>
-        <label for="addManufacturer"></label>
-        <input type="text" id="addManufacturerTxt" name="manufacturerName" />
-        <input type="button" id="addManufacturerBtn" value="Add" />
-    </div>
-
-    <div>
-        <span id="addManufacturerResult"></span>
-    </div>
-
-    <script type="text/javascript">
-        /*  
-            CLIENT-SIDE CODE HERE
-            - Add click event handler to button with id "addManufacturerBtn"
-            - Get new manufacturer name from input text with id "addManufacturerTxt"
-            - POST this data to API endpoint //frontend/dbApi.php
-                - action parameter must be "addManufacturer"
-                - new manufacturer name parameter can be anything, you must process it in API code
-            - process result (json)
-                - on success: { "ok": true }
-                - on fail: { "ok": false, "error": "error when trying...", "trace": "PHP trace info"}
-
-            - show result in span with id "addManufacturerResult"
-        */
-
-        
-    </script>
-
-    <ul>
-        <li><b>Front-end</b></li>
-        <li>HTML code locaton: src/frontend/dbPage.php</li>
-        <li>Input: input with id "addManufacturerTxt"</li>
-        <li>Output: span with id "addManufacturerResult"</li>
-        <li>AJAX endpoint: http://localhost:8080/frontend/dbApi.php</li>
-        <li>Method: POST</li>
-        <li>"action" post parameter must be "addManufacturer"</li>
-        <li>client-side script area is above this list &uArr;</li>
-
-        <li><b>Back-end</b></li>
-        <li>API code location: src/classes/Db/DbApi.php</li>
-        <li>Method: DbApi::handleAddManufacturer</li>
-
-        <li><b>Database</b></li>
-        <li>Table: manufacturer</li>
-        <li>Field: name</li>
-    </ul>
-</fieldset>
-
-<?php
-
-echo HtmlHelper::GetHtmlFooter();
+<?php
+
+use CandidateTest\Helpers\HtmlHelper;
+
+require_once $_SERVER['DOCUMENT_ROOT'] . '/../vendor/autoload.php';
+
+echo HtmlHelper::GetHtmlHeader('Basic database operations');
+
+?>
+
+<fieldset>
+    <legend>Database info</legend>
+
+    <h4>Database connection</h4>
+    <ul>
+        <li>Host: localhost:<?= $_ENV['MYSQL_PORT'] ?></li>
+        <li>User: <?= $_ENV['MYSQL_USER'] ?></li>
+        <li>Password: <?= $_ENV['MYSQL_PASSWORD'] ?></li>
+        <li>Database: <?= $_ENV['MYSQL_DATABASE'] ?></li>
+    </ul>
+</fieldset>
+<br />
+<br />
+<fieldset>
+    <legend>"select" html element from manufacturers table</legend>
+    <p>Render (echo) a "select" HTML component filled with all manufacturers ordered by name from the database<br />
+     value: manufacturer.id,<br />
+     label: manufacturer.name</p>
+
+    <div>
+        <span><b>Manufacturers:</b></span>
+        <?php \CandidateTest\Db\DbBasics::renderManufacturersSelectComponent() ?>
+    </div>
+
+    <ul>
+        <li>Code location: src/classes/Db/DbBasics.php</li>
+        <li>Method: DbBasics::renderManufacturersSelectComponent</li>
+    </ul>
+</fieldset>
+<br />
+<br />
+<fieldset>
+    <legend>"table" html element filled from the database</legend>
+
+    <p>Render (echo) a "table" HTML component filled with all products from the database<br />
+     Columns: product.id, category.name, manufacturer.name, product.name, product.price</p>
+
+    <h4>Products:</h4>
+    <div>
+        <?php \CandidateTest\Db\DbBasics::renderProductList() ?>
+    </div>
+
+    <ul>
+        <li>Code location: src/classes/Db/DbBasics.php</li>
+        <li>Method: DbBasics::renderProductList</li>
+    </ul>
+</fieldset>
+
+
+<br />
+<br />
+<fieldset>
+    <legend>Add manufacturer</legend>
+
+    <p>Add a manufacturer to the database<br />
+    When a name exists in the database or the name is empty, return an error.
+    </p>
+
+    <div>
+        <label for="addManufacturer"></label>
+        <input type="text" id="addManufacturerTxt" name="manufacturerName" />
+        <input type="button" id="addManufacturerBtn" value="Add" />
+    </div>
+
+    <div>
+        <span id="addManufacturerResult"></span>
+    </div>
+
+    <script type="text/javascript">
+        /*  
+            CLIENT-SIDE CODE HERE
+            - Add click event handler to button with id "addManufacturerBtn"
+            - Get new manufacturer name from input text with id "addManufacturerTxt"
+            - POST this data to API endpoint //frontend/dbApi.php
+                - action parameter must be "addManufacturer"
+                - new manufacturer name parameter can be anything, you must process it in API code
+            - process result (json)
+                - on success: { "ok": true }
+                - on fail: { "ok": false, "error": "error when trying...", "trace": "PHP trace info"}
+
+            - show result in span with id "addManufacturerResult"
+        */
+
+        
+    </script>
+
+    <ul>
+        <li><b>Front-end</b></li>
+        <li>HTML code locaton: src/frontend/dbPage.php</li>
+        <li>Input: input with id "addManufacturerTxt"</li>
+        <li>Output: span with id "addManufacturerResult"</li>
+        <li>AJAX endpoint: http://localhost:8080/frontend/dbApi.php</li>
+        <li>Method: POST</li>
+        <li>"action" post parameter must be "addManufacturer"</li>
+        <li>client-side script area is above this list &uArr;</li>
+
+        <li><b>Back-end</b></li>
+        <li>API code location: src/classes/Db/DbApi.php</li>
+        <li>Method: DbApi::handleAddManufacturer</li>
+
+        <li><b>Database</b></li>
+        <li>Table: manufacturer</li>
+        <li>Field: name</li>
+    </ul>
+</fieldset>
+
+<?php
+
+echo HtmlHelper::GetHtmlFooter();
--- src/frontend/playground.php
+++ PHP_CodeSniffer
@@ -1,9 +1,9 @@
-<?php
-
-use CandidateTest\Group01\ArrayBasics;
-
-require_once $_SERVER['DOCUMENT_ROOT'] . '/../vendor/autoload.php';
-
-$employees = \CandidateTest\Group01\Types\Employee::getSampleEmployees();
-
-echo '<pre>' . implode("\n", $employees) . '</pre>';
+<?php
+
+use CandidateTest\Group01\ArrayBasics;
+
+require_once $_SERVER['DOCUMENT_ROOT'] . '/../vendor/autoload.php';
+
+$employees = \CandidateTest\Group01\Types\Employee::getSampleEmployees();
+
+echo '<pre>' . implode("\n", $employees) . '</pre>';
--- src/frontend/stringBasicsPage.php
+++ PHP_CodeSniffer
@@ -1,157 +1,165 @@
-<?php
-
-require_once $_SERVER['DOCUMENT_ROOT'] . '/../vendor/autoload.php';
-
-$action = filter_input(INPUT_GET, 'action');
-
-echo \CandidateTest\Helpers\HtmlHelper::GetHtmlHeader('String basics');
-
-echo '<form>';
-
-writeStringEnterAndResultCode(
-    'checkLetters',
-    'Check for lowercase, uppercase and number letters',
-    'getCheckLettersResult',
-    'Qwer1234',
-    getCheckLettersHelp()
-);
-
-writeStringEnterAndResultCode(
-    'convertToHttps',
-    'Convert url to https format',
-    'getConvertToHttpsResult',
-    'https://mysite.com',
-    getConvertToHttpsHelp()
-);
-
-writeStringEnterAndResultCode(
-    'getIssueNumbers',
-    'Get issue numbers (like ASDF-123456) from string',
-    'getGetIssueNumbersResult',
-    'Minions ipsum UKSR-98765489 underweaaar potatoooo hahaha SDgD-985413748 hahaha baboiii ABCD-123456 chasy. Jeje me want bananaaa! Ti aamoo! Bee (ERUE-951234) do bee do bee do. Ti aamoo! poulet tikka masala potatoooo bee do bee do bee do. Butt poopayee bananaaaa chasy baboiii po kass pepete poopayee wiiiii belloo!, QWER-987654',
-    getGetIssueNumbersHelp(),
-    true
-);
-
-writeStringEnterAndResultCode(
-    'capitalizeEachWord',
-    'Capitalize each word that begins with letter (very fairy tales => Very Fairy Tales)',
-    'capitalizeEachWordResult',
-    'hello Mike, have a great Holiday',
-    getCapitalizeEachWordHelp(),
-    true
-);
-
-echo '</form>';
-
-echo \CandidateTest\Helpers\HtmlHelper::GetHtmlFooter();
-
-// end of execution
-
-/* Check if string contains lowercase letters, uppercase letters and numbers  */
-
-function getCheckLettersResult(string $inputString = ''): string {
-    $output = \CandidateTest\Group01\StringBasics::CheckIfContainsLowercaseUppercaseNumber($inputString);
-    return "<p>String [{$inputString}] contains " . ($output ? '' : 'NOT ') . 'all of uppercase, lowercase and number letters</p>';
-}
-
-function getCheckLettersHelp(string $inputString = ''): string {
-    return '
-    <ul>
-        <li>Code location: src/classes/Group01/StringBasics.php</li>
-        <li>Method: StringBasics::CheckIfContainsLowercaseUppercaseNumber</li>
-        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testCheckIfContainsLowercaseUppercaseNumber</code></li>
-    </ul>
-    ';
-}
-
-/* Convert url to https section */
-
-function getConvertToHttpsResult(string $inputUrl = ''): string {
-    $output = \CandidateTest\Group01\StringBasics::ConvertUrlToHttps($inputUrl);
-
-    $safeUrl = htmlentities($inputUrl);
-    $safeOutput = htmlentities($output);
-
-    return "<p>Url [{$safeUrl}] converted to: [{$safeOutput}]</p>";
-}
-
-function getConvertToHttpsHelp(string $inputString = ''): string {
-    return '
-    <ul>
-        <li>Code location: src/classes/Group01/StringBasics.php</li>
-        <li>Method: StringBasics::ConvertUrlToHttps</li>
-        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testConvertUrlToHttps</code></li>
-    </ul>
-    ';
-}
-
-
-/* Get issue numbers */
-
-function getGetIssueNumbersResult(string $inputString = ''): string {
-    $output = \CandidateTest\Group01\StringBasics::GetIssueNumbers($inputString);
-
-    $safeString = htmlentities($inputString);
-    $safeOutput = sprintf('<pre>%s</pre>', print_r($output, true));
-
-    return "<p>Issue numbers in string [{$safeString}] are: {$safeOutput}</p>";
-}
-
-function getGetIssueNumbersHelp(string $inputString = ''): string {
-    return '
-    <ul>
-        <li>Code location: src/classes/Group01/StringBasics.php</li>
-        <li>Method: StringBasics::GetIssueNumbers</li>
-        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetIssueNumbers</code></li>
-    </ul>
-    ';
-}
-
-/* Capitalize each word */
-
-function capitalizeEachWordResult(string $inputString = ''): string {
-    $output = \CandidateTest\Group01\StringBasics::CapitalizeEachWord($inputString);
-
-    $safeString = htmlentities($inputString);
-    $safeOutput = htmlentities($output);
-
-    return "<p>capitalized string [{$safeString}] is: {$safeOutput}</p>";
-}
-
-function getCapitalizeEachWordHelp(string $inputString = ''): string {
-    return '
-    <ul>
-        <li>Code location: src/classes/Group01/StringBasics.php</li>
-        <li>Method: StringBasics::CapitalizeEachWord</li>
-        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testCapitalizeEachWord</code></li>
-    </ul>
-    ';
-}
-
-/* Helpers */
-
-function writeStringEnterAndResultCode(
-    string $action,
-    string $title,
-    callable $callback,
-    string $defaultContent,
-    string $helpHtml = '',
-    $showTextarea = false
-): void {
-    $inputString = $_GET[$action] ?? $defaultContent ?? '';
-
-    $input = $showTextarea
-        ? '<textarea style="width: 50vw;" rows="4" name="' . $action . '">' . htmlentities($inputString ?? '') . '</textarea>'
-        : '<input type="text" style="width: 50vw;" name="' . $action . '" value="' . htmlentities($inputString ?? '') . '" />';
-
-    echo '
-    <fieldset>
-        <legend>' . htmlentities($title) . '</legend>
-            ' . $input . '
-            <input type="submit">
-        ' . call_user_func($callback, $inputString) . '
-        ' . $helpHtml . '
-    </fieldset>
-    ';
-}
\ No newline at end of file
+<?php
+
+require_once $_SERVER['DOCUMENT_ROOT'] . '/../vendor/autoload.php';
+
+$action = filter_input(INPUT_GET, 'action');
+
+echo \CandidateTest\Helpers\HtmlHelper::GetHtmlHeader('String basics');
+
+echo '<form>';
+
+writeStringEnterAndResultCode(
+    'checkLetters',
+    'Check for lowercase, uppercase and number letters',
+    'getCheckLettersResult',
+    'Qwer1234',
+    getCheckLettersHelp()
+);
+
+writeStringEnterAndResultCode(
+    'convertToHttps',
+    'Convert url to https format',
+    'getConvertToHttpsResult',
+    'https://mysite.com',
+    getConvertToHttpsHelp()
+);
+
+writeStringEnterAndResultCode(
+    'getIssueNumbers',
+    'Get issue numbers (like ASDF-123456) from string',
+    'getGetIssueNumbersResult',
+    'Minions ipsum UKSR-98765489 underweaaar potatoooo hahaha SDgD-985413748 hahaha baboiii ABCD-123456 chasy. Jeje me want bananaaa! Ti aamoo! Bee (ERUE-951234) do bee do bee do. Ti aamoo! poulet tikka masala potatoooo bee do bee do bee do. Butt poopayee bananaaaa chasy baboiii po kass pepete poopayee wiiiii belloo!, QWER-987654',
+    getGetIssueNumbersHelp(),
+    true
+);
+
+writeStringEnterAndResultCode(
+    'capitalizeEachWord',
+    'Capitalize each word that begins with letter (very fairy tales => Very Fairy Tales)',
+    'capitalizeEachWordResult',
+    'hello Mike, have a great Holiday',
+    getCapitalizeEachWordHelp(),
+    true
+);
+
+echo '</form>';
+
+echo \CandidateTest\Helpers\HtmlHelper::GetHtmlFooter();
+
+// end of execution
+
+/* Check if string contains lowercase letters, uppercase letters and numbers  */
+
+function getCheckLettersResult(string $inputString = ''): string
+{
+    $output = \CandidateTest\Group01\StringBasics::CheckIfContainsLowercaseUppercaseNumber($inputString);
+    return "<p>String [{$inputString}] contains " . ($output ? '' : 'NOT ') . 'all of uppercase, lowercase and number letters</p>';
+}
+
+function getCheckLettersHelp(string $inputString = ''): string
+{
+    return '
+    <ul>
+        <li>Code location: src/classes/Group01/StringBasics.php</li>
+        <li>Method: StringBasics::CheckIfContainsLowercaseUppercaseNumber</li>
+        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testCheckIfContainsLowercaseUppercaseNumber</code></li>
+    </ul>
+    ';
+}
+
+/* Convert url to https section */
+
+function getConvertToHttpsResult(string $inputUrl = ''): string
+{
+    $output = \CandidateTest\Group01\StringBasics::ConvertUrlToHttps($inputUrl);
+
+    $safeUrl = htmlentities($inputUrl);
+    $safeOutput = htmlentities($output);
+
+    return "<p>Url [{$safeUrl}] converted to: [{$safeOutput}]</p>";
+}
+
+function getConvertToHttpsHelp(string $inputString = ''): string
+{
+    return '
+    <ul>
+        <li>Code location: src/classes/Group01/StringBasics.php</li>
+        <li>Method: StringBasics::ConvertUrlToHttps</li>
+        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testConvertUrlToHttps</code></li>
+    </ul>
+    ';
+}
+
+
+/* Get issue numbers */
+
+function getGetIssueNumbersResult(string $inputString = ''): string
+{
+    $output = \CandidateTest\Group01\StringBasics::GetIssueNumbers($inputString);
+
+    $safeString = htmlentities($inputString);
+    $safeOutput = sprintf('<pre>%s</pre>', print_r($output, true));
+
+    return "<p>Issue numbers in string [{$safeString}] are: {$safeOutput}</p>";
+}
+
+function getGetIssueNumbersHelp(string $inputString = ''): string
+{
+    return '
+    <ul>
+        <li>Code location: src/classes/Group01/StringBasics.php</li>
+        <li>Method: StringBasics::GetIssueNumbers</li>
+        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testGetIssueNumbers</code></li>
+    </ul>
+    ';
+}
+
+/* Capitalize each word */
+
+function capitalizeEachWordResult(string $inputString = ''): string
+{
+    $output = \CandidateTest\Group01\StringBasics::CapitalizeEachWord($inputString);
+
+    $safeString = htmlentities($inputString);
+    $safeOutput = htmlentities($output);
+
+    return "<p>capitalized string [{$safeString}] is: {$safeOutput}</p>";
+}
+
+function getCapitalizeEachWordHelp(string $inputString = ''): string
+{
+    return '
+    <ul>
+        <li>Code location: src/classes/Group01/StringBasics.php</li>
+        <li>Method: StringBasics::CapitalizeEachWord</li>
+        <li>Run unit test: <code>docker exec -it ct_php /html/vendor/bin/phpunit /html/tests --filter testCapitalizeEachWord</code></li>
+    </ul>
+    ';
+}
+
+/* Helpers */
+
+function writeStringEnterAndResultCode(
+    string $action,
+    string $title,
+    callable $callback,
+    string $defaultContent,
+    string $helpHtml = '',
+    $showTextarea = false
+): void {
+    $inputString = $_GET[$action] ?? $defaultContent ?? '';
+
+    $input = $showTextarea
+        ? '<textarea style="width: 50vw;" rows="4" name="' . $action . '">' . htmlentities($inputString ?? '') . '</textarea>'
+        : '<input type="text" style="width: 50vw;" name="' . $action . '" value="' . htmlentities($inputString ?? '') . '" />';
+
+    echo '
+    <fieldset>
+        <legend>' . htmlentities($title) . '</legend>
+            ' . $input . '
+            <input type="submit">
+        ' . call_user_func($callback, $inputString) . '
+        ' . $helpHtml . '
+    </fieldset>
+    ';
+}
--- src/info.php
+++ PHP_CodeSniffer
@@ -1,3 +1,3 @@
-<?php
-
-phpinfo();
+<?php
+
+phpinfo();

